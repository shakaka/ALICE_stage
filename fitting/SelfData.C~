
#include "TROOT.h"
#include "TFile.h"
#include "TTree.h"
#include "TBranch.h"
#include "TH1F.h"
#include "TF1.h"
#include "TCanvas.h"
#include "TMath.h"
#include "TSpectrum.h"


//For background
//
// Exeponential background function 
Double_t expBg(Double_t *x, Double_t *par) {
   return exp(par[0]+par[1]*x[0]) ;
}

// Pol2 distribution function
Double_t myPol2(Double_t *x, Double_t *par) {
  return par[0]+par[1]*x[0]+par[2]*x[0]*x[0];
}
// varWGaus distribution function
Double_t varWGaus(Double_t *x, Double_t *par) {
  return par[0]*exp(-TMath::Power((x[0]-par[1]),2)/(2*TMath::Power((par[2]+par[3]*(x[0]-par[1])/par[1]),2)));
}



//For signal
//
// Gaussian distribution function(n, miu, sigma) 
Double_t gausDis(Double_t *x, Double_t *par) {
  return par[0]*exp(-0.5*(TMath::Power(((x[0]-par[1])/par[2]),2)));
}

/*
// CB2 distribution function(alpha, n, sigma, miu)
Double_t cB(Double_t *x, Double_t *par) {
  return ROOT::Math::crystalball_function(x[0], par[0], par[1], par[2], par[3]);
}

*/



// Sum of background and peak function
//
Double_t expGaus(Double_t *x, Double_t *par) {
  return expBg(x,par) + gausDis(x,&par[2]);
}

Double_t mpol2Gaus(Double_t *x, Double_t *par) {
  return myPol2(x, par) + gausDis(x,&par[3]);
}

Double_t varGausGaus(Double_t *x, Double_t *par) {
  return varWGaus(x,par) + gausDis(x,&par[4]);
}


/*

Double_t expCB(Double_t *x, Double_t *par) {
  return expBg(x,par) + cB(x,&par[2]);
}

Double_t pol2CB(Double_t *x, Double_t *par) {
  return myPol2(x, par) + cB(x,&par[3]);
}

Double_t varGausCB(Double_t *x, Double_t *par) {
  return varWGaus(x,par) + cB(x,&par[4]);
}
*/





void SelfData()
{
  gROOT->Reset(); 
  
  Int_t nbin = 150;
  TH1F *bgData = new TH1F("", "Random Background", nbin, 2, 5);
  TH1F *sgData = new TH1F("", "Random Data", nbin, 2, 5);

  TH1F *egFit = new TH1F("", "EG Fit", nbin, 2, 5);
  TH1F *pgFit = new TH1F("", "PG Fit", nbin, 2, 5);
  TH1F *vgFit = new TH1F("", "VG Fit", nbin, 2, 5);

  TH1F *noBg = new TH1F("", "Random TotalNo Background", nbin, 2, 5);
  
  //testing
  //TH1F *testing = new TH1F("", "test", nbin, 2, 5);

  //Fitting
  TF1 *fitFcnEG = new TF1("fitFcnEG",expGaus,2,5,5);
  fitFcnEG->SetParameters(1,-1,1,3.09,0.07);
 

  TF1 *fitFcnPG = new TF1("fitFcnPG",mpol2Gaus,2,5,6);
  fitFcnPG->SetParameters(1000,-430,44,1,3.09,0.07);
 
 
  TF1 *fitFcnVG = new TF1("fitFcnVG",varGausGaus,2,5,7);
  fitFcnVG->SetParameters(500,1,1,1, 1, 3.09, 0.07);
  fitFcnVG->SetParLimits(0, 500,501);
  fitFcnVG->SetParLimits(1, 0, 1);
  fitFcnVG->SetParLimits(1, 1, 2);
  fitFcnVG->SetParLimits(1, 0, 1);
  fitFcnVG->SetParLimits(5, 3, 3.2);
  fitFcnVG->SetParLimits(6, 0, 1);
  /*
  TF1 *fitFcnEC = new TF1("fitFcnEC",expCB,2,5,6);
  fitFcnEC->SetParameters(1,-1,1,1,0.07,3.09);


  TF1 *fitFcnPC = new TF1("fitFcnPC",pol2CB,2,5,7);
  fitFcnPC->SetParameters(1,1,1,1,1,0.07,3.09);
 

  TF1 *fitFcnVC = new TF1("fitFcnVC",varGausCB,2,5,8);
  fitFcnVC->SetParameters(1,1,1,1,1,1,0.07,3.09);

  */

  TCanvas *c2 = new TCanvas("c2", "c2");
  c2->Divide(2,3);

  TF1 funcGaus ("myGaus", "gaus(0)");
  funcGaus.SetParameters(1, 3.09, 0.07);

  TF1 funcInExpo ("inExpo", "expo(0)");
  funcInExpo.SetParameters(1, -1);

  bgData->Sumw2();
  bgData->FillRandom("inExpo",20e3);
  bgData->SetLineColor(1);

  egFit->Add(bgData);
  pgFit->Add(bgData);
  vgFit->Add(bgData);

  sgData->Sumw2();
  sgData->FillRandom("myGaus",2e3);
  sgData->SetLineColor(2);

  egFit->Add(sgData);
  pgFit->Add(sgData);
  vgFit->Add(sgData);
  //Try to treat
  /* TSpectrum *s = new TSpectrum(2); 
  TH1 *hb = s->Background(totData,30,"same");
  noBg->Add(totData);
  noBg->Add(hb, -1);
  */

  
  //testing
  /* TF1 *fitFcnV = new TF1("fitFcnV",varWGaus,2,5,4);
  fitFcnV->SetParameters(30,1,1,1);
  c2->cd(2);
  fitFcnV->DrawCopy("l");
  fitFcnV->SetParameters(30,1.2,1,1);
  fitFcnV->DrawCopy("lsame");
  fitFcnV->SetParameters(30,0.9,1,1);
  fitFcnV->DrawCopy("lsame");
  */


  c2->cd(1); 
  egFit->Fit("fitFcnEG");
  double sigm = fitFcnEG->GetParameter(4);
  double miu = fitFcnEG->GetParameter(3);
  //double eventN = fitFcnEG->Integral(miu-sigm*3, miu+sigm*3);
  int eventN = egFit->DoIntegral(144, 165);
  printf("event number = %d\n", eventN);
  printf("sigma = %g\n", sigm);
  printf("miu = %g\n", miu);


  egFit->Draw("h");

  c2->cd(3);
  pgFit->Fit("fitFcnPG");
  pgFit->Draw("h");

  c2->cd(5);
  vgFit->Fit("fitFcnVG");
  vgFit->Draw("h");
  /*
  c2->cd(2);
  totData->Fit("fitFcnEC");
  totData->Draw("h");

  c2->cd(4);
  totData->Fit("fitFcnPC");
  totData->Draw("h");

  c2->cd(6);
  totData->Fit("fitFcnVC");
  totData->Draw("h"); 
  */ 
}
